name: Release
run-name: Release ${{ github.event.release.tag_name }}

on:
  release:
    types: [created]

# Add permissions needed for release asset uploads
permissions:
  contents: write

jobs:
  update-release-notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      # Using this in this smaller action to simplify the release process and not port over all the existing changelog handling from other repos.
      - name: Generate Changelog
        id: changelog
        uses: infocus7/changelog-files-action@v2.0.0
        with:
          release-tag-name: ${{ github.event.release.tag_name }}
          changelog-directory: changelogs
      - uses: actions/download-artifact@v4
        with:
          name: changelog
      - name: Update Release Notes
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_NAME: ${{ github.repository }}
          RELEASE_ID: ${{ github.event.release.id }}
        run: |
          changelog_content=$(jq -Rs . < changelog_output.md) # Convert the changelog to JSON so we can send it.
          curl -L -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO_NAME/releases/$RELEASE_ID" \
            -d "{\"body\": $changelog_content}"

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        platform:
          - os: linux
            arch: amd64
            pack: true
          - os: linux
            arch: arm64
            pack: true
            # disable packing for darwin as it's not supported by upx (as of 4.2.4)
          - os: darwin
            arch: amd64
            pack: false
          - os: darwin
            arch: arm64
            pack: false
          - os: windows
            arch: amd64
            pack: true
          - os: windows
            arch: arm64
            pack: false
    steps:
      - uses: actions/checkout@v4
      - name: Build Binary
        shell: bash
        env:
          GOOS: ${{ matrix.platform.os }}
          GOARCH: ${{ matrix.platform.arch }}
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          # if pack is true, use build-and-pack target (which compresses the binary), otherwise use build target
          if [ "${{ matrix.platform.pack }}" = "true" ]; then
            make build-and-pack
          else
            make build
          fi
      - name: Upload Binary Artifact # Upload the binary to artifacts, so the publish-binaries job can download it
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ matrix.platform.os }}-${{ matrix.platform.arch }}
          path: _output/${{ github.event.release.tag_name }}

  publish-binaries:
    name: Publish Binaries
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-binaries]
    steps:
      - name: Download All Binary Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: _output/${{ github.event.release.tag_name }}
      - name: Authenticate to Google Cloud Storage
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.ISTIO_USAGE_COLLECTOR }}
          project_id: solo-public
      - name: Set up Google Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: Publish Binaries to Google Cloud Storage
        uses: 'google-github-actions/upload-cloud-storage@v2'
        with:
          path: _output/
          destination: istio-usage-collector
          parent: false
          process_gcloudignore: false

  publish-release-metadata:
    name: Publish Release Metadata
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [publish-binaries]
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate to Google Cloud Storage
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.ISTIO_USAGE_COLLECTOR }}
          project_id: solo-public
      - name: Set up Google Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: Set Up Release Metadata
        shell: bash
        run: |
          mkdir -p _output/metadata

          # Set up the releases.txt file for the release
          gsutil ls -d "gs://istio-usage-collector/v*" \
            | sed 's,^gs://istio-usage-collector/,,;s,/$,,' \
            | (echo "${{ github.event.release.tag_name }}"; cat) \
            | sort -rV \
            > "_output/metadata/releases.txt"

          # Set up the install script
          cp "./scripts/install.sh" "_output/metadata/install.sh"
      - name: Upload Release Metadata
        uses: 'google-github-actions/upload-cloud-storage@v2'
        with:
          path: '_output/metadata'
          destination: istio-usage-collector
          parent: false
          process_gcloudignore: false
          headers: |-
            cache-control: no-cache, no-store, must-revalidate, max-age=0
